import { useState, useCallback } from 'react';
import { GameState } from '../../types/game';

const GRID_COLS = 8;
const GRID_ROWS = 15;

// The initial state is now simpler, words are not part of it
const getInitialState = (): GameState => ({
  blocks: [],
  selectedBlocks: [],
  score: 0,
  foundWords: [],
  targetWords: [],
  gameStatus: 'playing',
  language: 'english',
  level: 1,
  rowCount: 0,
  gameSpeed: 7500,
  hintBlocks: [],
});

export const useGameState = () => {
  const [gameState, setGameState] = useState<GameState>(getInitialState());

  const updateGameState = useCallback((updates: Partial<GameState>) => {
    setGameState(prev => ({ ...prev, ...updates }));
  }, []);

  // Resets everything EXCEPT language and words, which are now managed from outside
  const resetCoreGameState = useCallback(() => {
    setGameState(prev => ({
      ...getInitialState(),
      language: prev.language, // Keep the current language
      targetWords: [], // Words will be regenerated by the parent hook
    }));
  }, []);


  // This function is now simpler, it just switches the language flag
  // and expects the parent hook to provide new words.
  const switchLanguage = useCallback(() => {
    setGameState(prev => ({
        ...prev,
        language: prev.language === 'english' ? 'arabic' : 'english',
    }));
  }, []);

  return {
    gameState,
    setGameState, // Exposing the raw setter for more flexibility in the main hook
    updateGameState,
    resetCoreGameState, // Renamed to be more specific
    switchLanguage,
    GRID_ROWS,
    GRID_COLS,
  };
};